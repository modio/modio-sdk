"use strict";(self.webpackChunkmodio_docs=self.webpackChunkmodio_docs||[]).push([[9268],{8588:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>s,default:()=>h,frontMatter:()=>r,metadata:()=>a,toc:()=>l});var i=n(4848),o=n(8453);const r={id:"multiplayer",title:"Multiplayer",sidebar_label:"Multiplayer",slug:"/cppsdk/multiplayer/",sidebar_position:11,custom_edit_url:"https://github.com/modio/modio-sdk-internal/blob/develop/doc/multiplayer.mdx"},s="Multiplayer",a={id:"game-integration/cppsdk/multiplayer",title:"Multiplayer",description:"This is an experimental feature and is subject to change.",source:"@site/public/en-us/game-integration/cppsdk/multiplayer.mdx",sourceDirName:"game-integration/cppsdk",slug:"/cppsdk/multiplayer/",permalink:"/cppsdk/multiplayer/",draft:!1,unlisted:!1,editUrl:"https://github.com/modio/modio-sdk-internal/blob/develop/doc/multiplayer.mdx",tags:[],version:"current",sidebarPosition:11,frontMatter:{id:"multiplayer",title:"Multiplayer",sidebar_label:"Multiplayer",slug:"/cppsdk/multiplayer/",sidebar_position:11,custom_edit_url:"https://github.com/modio/modio-sdk-internal/blob/develop/doc/multiplayer.mdx"},sidebar:"sidebar",previous:{title:"Marketplace",permalink:"/cppsdk/marketplace/"},next:{title:"Getting Started",permalink:"/cppsdk/windows/getting-started/"}},d={},l=[{value:"P2P Servers",id:"p2p-servers",level:2},{value:"Dedicated Servers",id:"dedicated-servers",level:2},{value:"Overview",id:"overview",level:3},{value:"Initialization Settings",id:"initialization-settings",level:3},{value:"References",id:"references",level:2}];function c(e){const t={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",li:"li",mermaid:"mermaid",p:"p",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h1,{id:"multiplayer",children:"Multiplayer"}),"\n",(0,i.jsx)(t.admonition,{title:"Experimental Feature",type:"warning",children:(0,i.jsx)(t.p,{children:"This is an experimental feature and is subject to change."})}),"\n",(0,i.jsx)(t.p,{children:"The mod.io SDK provides a framework of features to better support the utilization of UGC in the context of a Dedicated Server and P2P Multiplayer environments."}),"\n",(0,i.jsxs)(t.p,{children:["This framework does ",(0,i.jsx)(t.em,{children:"not"})," take the place of any kind of online matchmaking, server advertising, joining, replication, communication, or any form of information transfer between clients and the server; it enables the authentication of the mod.io SDK in a headless environment, as well a providing helpers for tracking the use of UGC by players on your server, and providing a single source of truth for the full list of UGC in use by the Server and all Clients."]}),"\n",(0,i.jsx)(t.h2,{id:"p2p-servers",children:"P2P Servers"}),"\n",(0,i.jsxs)(t.p,{children:["A P2P Server is expected to initialize in the exact same way a normal user would; the handling of UGC by joining clients (as well as the UGC in use by those clients) should be initialized as ",(0,i.jsx)(t.a,{href:"/cppsdk/getting-started/#temporary-mod-set",children:"Temporary Mod Sets"}),". P2P Servers are not intended to be used with the Mod.io Dedicated Server framework."]}),"\n",(0,i.jsx)(t.p,{children:"A basic example would be as follows:"}),"\n",(0,i.jsx)(t.mermaid,{value:"sequenceDiagram\n    participant host as Host\n    participant client1 as Client 1\n    participant client2 as Client 2\n\n    note over host: Authenticated with Mod.io\n    note over host: Has List of Subscribed Mods\n    note over host: Opens Session\n    note over host: Advertises Session with ModID List\n    note over client1, client2: Has List of Subscribed Mods\n    client1->>host: Request Session Info\n    note over client1: Adds Host Mods to Temporary Mod Set\n    client1->>host: Joins Session\n    client1->>host: Sends Subscription List\n    note over host: Add Client Mods to Temporary Mod Set\n    client2->>host: Request Session Info\n    note over client2: Adds Host Mods to Temporary Mod Set\n    client2->>host: Joins Session\n    client2->>host: Sends Subscription List\n    note over host: Add Client Mods to Temporary Mod Set\n    host->>client1: Send Client2 Mod List\n    note over client1: Add Client2 Mod List to Temporary Mod Set\n    host->>client2: Send Client1 Mod List\n    note over client2: Add Client1 Mod List to Temporary Mod Set\n"}),"\n",(0,i.jsx)(t.p,{children:"None of this requires the use of the Dedicated Server Framework, and can be achieved with the standard mod.io SDK framework."}),"\n",(0,i.jsx)(t.h2,{id:"dedicated-servers",children:"Dedicated Servers"}),"\n",(0,i.jsxs)(t.p,{children:["In the case of Dedicated Servers, the process of authentication and initialization requires an OAuth token to be created on the mod.io website which will provide the Server the same access and entitlements as the user (generally the Server owner) creating it, within the scope of the game in question, in a read-only capacity. This allows the Server to both initialize, download UGC, and access paid UGC that the user who created the OAuth token has access to, if the game itself allows it. This OAuth token can be created on your ",(0,i.jsx)(t.a,{href:"https://mod.io/me/access",children:"API Settings"})," page."]}),"\n",(0,i.jsx)(t.h3,{id:"overview",children:"Overview"}),"\n",(0,i.jsx)(t.p,{children:"A general overview of the mod.io Dedicated Server framework prescribed processes is as follows:"}),"\n",(0,i.jsx)(t.mermaid,{value:"sequenceDiagram\n    box Green Your Code\n    participant client as Game Client\n    participant server as Game Server\n    end\n\n    box Blue Our Framework\n    participant framework as Mod.io Server Framework\n    participant backend as Mod.io Service Backend\n    end\n\n    note over server: Consumes config\n    server->>framework: InitializeModioServerAsync(Init Options)\n    note over framework: Caches Init Options\n    framework->>server: OnInitComplete\n    server->>framework: Enable Mod Management\n    server->>framework: InstallOrUpdateServerMods()\n    loop Per-ModID\n        framework->>backend: Validates Mod ID\n        framework->>backend: Validates Ownership\n        backend->>framework: Downloads Modfile\n    end\n    framework->>server: OnComplete\n    note over server: Advertises Session Online (with Mod IDs)\n    client->>server: Requests Session Data\n    note over client: Your Validation Check\n    note over client: Initializes Mods as Temporary Mod Set\n    client->>server: Joins Session\n    client->>server: Sends User Subscriptions\n    server->>framework: RegisterClientModsWithServer(User Subscriptions)\n    loop Per-ModID\n        framework->>backend: Validates Mod ID\n        framework->>backend: Validates Ownership\n    end\n    framework->>server: OnComplete(All Registered Mods)\n    note over server: Your Validation Check\n    note over server,client: To All Connected Clients\n    server->>client: Sends All Registered Mods\n    note over client: Your Validation Check\n    note over client: Adds All Registered Mods to Temporary Mod Set"}),"\n",(0,i.jsx)(t.p,{children:"As you can see, our framework is intended to only be directly interacted with via the dedicated server itself; clients still authenticate and acquire mods via the conventional mod.io SDK, and it is up the the developer to get that list of subscribed mods to the server itself. The server can then utilize our framework to manage its UGC, as well as maintain an up-to-date list of client UGC across all clients."}),"\n",(0,i.jsx)(t.p,{children:'At certain points in the above diagram you will note "Your Validation Step". These indicates places in the execution chain where you can insert you own steps for thing like validation, the accepting or refusing of UGC, and filtering based on things like tags and content. These steps allow you have more direct control over what UGC is utilized by both clients and the server. You could even add your own step to fully download all client UGC onto the server in a temporary mod set, if you wanted.'}),"\n",(0,i.jsx)(t.h3,{id:"initialization-settings",children:"Initialization Settings"}),"\n",(0,i.jsx)(t.p,{children:"In addition to the usual initialization options required in the base SDK, the mod.io dedicated server framework requires some additional settings to be correctly initialized. These additional options are required for proper initialization, and will differ between individual servers, and as such will need to be configurable upon launch or execution. The method of handling these settings is entirely up to your implementation; launch arguments, a config file, whatever suits your purposes best."}),"\n",(0,i.jsx)(t.p,{children:"These additional options are, in brief:"}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Mods Directory"}),": This is required to tell the SDK where to download Modfiles to, as we make no assumptions around what OS environment the SDK is operating in."]}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Token"}),": This is required to allow the SDK to interact with the mod.io service without requiring human intervention in the authentication process. This Token needs to be generated on the mod.io website, and operates in a read-only capacity on behalf of the creating user. There should be a single token per dedicated server. You should ensure that this token cannot be accessed by clients at any point."]}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Mods"}),": The list of ModIDs the server should download upon calling ",(0,i.jsx)(t.code,{children:"InstallOrUpdateServerModsAsync()"}),". This list of ModIDs should generally be shared with every client as part of the joining process."]}),"\n",(0,i.jsx)(t.h2,{id:"references",children:"References"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"/cppsdk/getting-started/#multiplayer",children:"Multiplayer Introduction"})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"/cppsdk/getting-started/#temporary-mod-set",children:"Temporary Mods Sets"})}),"\n"]})]})}function h(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>a});var i=n(6540);const o={},r=i.createContext(o);function s(e){const t=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),i.createElement(r.Provider,{value:t},e.children)}}}]);