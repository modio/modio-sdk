"use strict";(self.webpackChunkmodio_docs=self.webpackChunkmodio_docs||[]).push([[5936],{6492:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>r,default:()=>h,frontMatter:()=>s,metadata:()=>a,toc:()=>l});var i=t(4848),o=t(8453);const s={id:"android-getting-started",title:"Getting Started",slug:"/cppsdk/android/getting-started/",sidebar_position:1,custom_edit_url:"https://github.com/modio/modio-sdk-internal/blob/develop/platform/android/doc/getting-started.mdx"},r=void 0,a={id:"game-integration/cppsdk/android/android-getting-started",title:"Getting Started",description:"Pre-requisites",source:"@site/public/en-us/game-integration/cppsdk/android/getting-started.mdx",sourceDirName:"game-integration/cppsdk/android",slug:"/cppsdk/android/getting-started/",permalink:"/cppsdk/android/getting-started/",draft:!1,unlisted:!1,editUrl:"https://github.com/modio/modio-sdk-internal/blob/develop/platform/android/doc/getting-started.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{id:"android-getting-started",title:"Getting Started",slug:"/cppsdk/android/getting-started/",sidebar_position:1,custom_edit_url:"https://github.com/modio/modio-sdk-internal/blob/develop/platform/android/doc/getting-started.mdx"},sidebar:"sidebar",previous:{title:"CMake Integration",permalink:"/cppsdk/ios/cmake-integration/"},next:{title:"CMake Integration",permalink:"/cppsdk/android/cmake-integration/"}},d={},l=[{value:"Pre-requisites",id:"pre-requisites",level:2},{value:"Android SDK/NDK Versions",id:"android-sdkndk-versions",level:2},{value:"Compiling for Android",id:"compiling-for-android",level:2},{value:"Initializing the Android SDK",id:"initializing-the-android-sdk",level:2},{value:"Authentication",id:"authentication",level:2},{value:"Sever Auth Code",id:"sever-auth-code",level:3},{value:"ID Token",id:"id-token",level:3},{value:"Marketplace",id:"marketplace",level:2}];function c(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"pre-requisites",children:"Pre-requisites"}),"\n",(0,i.jsx)(n.p,{children:"Install a Perl distribution (ie Strawberry Perl) and ensure perl.exe is in your path."}),"\n",(0,i.jsx)(n.h2,{id:"android-sdkndk-versions",children:"Android SDK/NDK Versions"}),"\n",(0,i.jsx)(n.p,{children:"The mod.io Android SDK is built against NDK version r25b and supports the arm64-v8a ABI. To install the correct NDK, open Android Studio, go to the SDK Manager and install the following:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["SDK Platforms","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:'Android 14.0 ("UpsideDownCake") (API 34)'}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["SDK Tools (tick ",(0,i.jsx)(n.code,{children:"Show Package Details"})," to see all these)","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Android SDK Build Tools - 34.0.0"}),"\n",(0,i.jsx)(n.li,{children:"NDK - 25.1.8937393"}),"\n",(0,i.jsx)(n.li,{children:"Android SDK Command-line Tools - latest"}),"\n",(0,i.jsx)(n.li,{children:"CMake 3.22.1"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"compiling-for-android",children:"Compiling for Android"}),"\n",(0,i.jsx)(n.p,{children:"Currently, the mod.io SDK can only be used from native Android applications being built with CMake on Windows. There is no support for the AGDE for Visual Studio. mod.io SDK method calls are not available from Java. You can follow the CMake Integration documentation for how to configure your native CMake project to use the SDK."}),"\n",(0,i.jsx)(n.h2,{id:"initializing-the-android-sdk",children:"Initializing the Android SDK"}),"\n",(0,i.jsxs)(n.p,{children:["Prior to initializing the mod.io SDK via ",(0,i.jsx)(n.code,{children:"Modio::InitializeAsync"}),", you have to pass a few initialization parameters to the SDK for Android specific support."]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:'#include "ModioAndroid.h"'}),". The next three android specific function calls require this header."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Pass mod.io the JNI VM, an optional reference to the global ClassLoader, and specify whether to use external storage for downloaded mods using ",(0,i.jsx)(n.code,{children:"Modio::InitializeAndroidJNI(vm, nullptr, true);"}),". Generally you should do this in your ",(0,i.jsx)(n.code,{children:"JNI_OnLoad"})," method."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"If you don't provide a reference to the native classloader, the SDK will attempt to discover and create one itself."}),"\n",(0,i.jsxs)(n.li,{children:["The ",(0,i.jsx)(n.code,{children:"bUseExternalStorageForMods"})," parameter (defaults to ",(0,i.jsx)(n.code,{children:"true"}),") determines whether downloaded mods should be stored in external storage. Set this to ",(0,i.jsx)(n.code,{children:"false"})," if you want to use internal storage instead."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Pass mod.io a reference to your native main Activity using ",(0,i.jsx)(n.code,{children:"Modio::SetGlobalActivity(JavaObject);"}),". You can do this either in a native event from Java, or anytime in your startup process if you have a reference to the native activity cached."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Call ",(0,i.jsx)(n.code,{children:"Modio::InitializeAndroid();"})," for mod.io to initialize and setup its JNI bindings."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"authentication",children:"Authentication"}),"\n",(0,i.jsx)(n.p,{children:"There are two ways that you can perform Google SSO, either via a server-side auth code which the mod.io service will exchange for an ID Token, or directly using an ID token."}),"\n",(0,i.jsx)(n.h3,{id:"sever-auth-code",children:"Sever Auth Code"}),"\n",(0,i.jsx)(n.p,{children:"Obtain a Server Auth Code from Google Play Games Services (v1 only) or the Google Sign-In Client library, ensuring you request Email access and the Profile scope."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"GoogleSignInOptions signInOptions = new GoogleSignInOptions.Builder(GoogleSignInOptions.DEFAULT_GAMES_SIGN_IN)\n                .requestScopes(new Scope(Scopes.PROFILE))\n                .requestEmail()\n                .requestServerAuthCode(OAUTH_CLIENT_ID)\n                .build();\n"})}),"\n",(0,i.jsx)(n.p,{children:"You can then show the Google Sign-In Intent to prompt users to consent to the OAuth scopes you are requesting, and obtain the server auth code in the callback."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"    SignInClient = GoogleSignIn.getClient(this, signInOptions);\n    startActivityForResult(SignInClient.getSignInIntent(), RC_SIGN_IN);\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent intent) {\n        if (requestCode == RC_SIGN_IN) {\n            Task<GoogleSignInAccount> task = GoogleSignIn.getSignedInAccountFromIntent(intent);\n\n            try {\n                GoogleSignInAccount account = task.getResult(ApiException.class);\n                serverSideAuthCode = account.getServerAuthCode();\n            }\n        }\n    }\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Once you receive the Server Auth Code, you can authenticate using ",(0,i.jsx)(n.code,{children:"Modio::AuthenticateUserExternalAsync"}),", passing ",(0,i.jsx)(n.code,{children:"Modio::AuthenticationProvider::GoogleServerSideToken"})," as the authentication provider. This indicates to mod.io that this is a server side token that should be exchanged for an ID Token by the backend."]}),"\n",(0,i.jsx)(n.p,{children:"Ensure that you have configured your OAuth client ID and secret on your games authentication providers page."}),"\n",(0,i.jsxs)(n.p,{children:["You can read more about Google Play Services sign-in at ",(0,i.jsx)(n.a,{href:"https://developers.google.com/games/services/common/concepts/v1/sign-in",children:"https://developers.google.com/games/services/common/concepts/v1/sign-in"})]}),"\n",(0,i.jsx)(n.h3,{id:"id-token",children:"ID Token"}),"\n",(0,i.jsx)(n.p,{children:"You can also directly request an ID Token using Google Credential Manager, and use this to authenticate."}),"\n",(0,i.jsxs)(n.p,{children:["Once you receive the ID Token, you can authenticate using ",(0,i.jsx)(n.code,{children:"Modio::AuthenticateUserExternalAsync"}),", passing ",(0,i.jsx)(n.code,{children:"Modio::AuthenticationProvider::GoogleIDToken"})," as the authentication provider. This indicates to mod.io that this is is an ID token that can be directly used."]}),"\n",(0,i.jsx)(n.h2,{id:"marketplace",children:"Marketplace"}),"\n",(0,i.jsxs)(n.p,{children:["You can set up your Android game so users can purchase creator credits through the Google Play Store, and the mod.io platform will verify those purchases and grant associated entitlements to the user. To enable this, first ",(0,i.jsx)(n.a,{href:"/platforms/google/marketplace",children:"follow these steps to configure entitlements for your game"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["Next, ",(0,i.jsx)(n.a,{href:"https://developer.android.com/google/play/billing/integrate",children:"integrate the Google Play Billing Library into your game"})," to query for your In-App Products (IAPs) and make purchases."]}),"\n",(0,i.jsxs)(n.p,{children:["With the above points completed, you can now call the Mod.io SDK's ",(0,i.jsx)(n.code,{children:"RefreshEntitlementsAsync"})," function, which will initiate a backend request to Google to verify a purchase and grant the associated entitlements (virtual currency) to the user's account. Note that the user must be signed in via Google's SSO (see previous section Authentication)."]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"RefreshEntitlementsAsync"})," function must be called after a successful Google Play purchase, as you must pass through the json receipt from the purchase. As the Google Play Billing Library is implemented in Java, you will need to pass this json receipt from Java to C++ via a JNI call. Then you can call ",(0,i.jsx)(n.code,{children:"RefreshEntitlementsAsync"}),", adding the json receipt to the ",(0,i.jsx)(n.code,{children:"EntitlementParams"})," object."]}),"\n",(0,i.jsx)(n.p,{children:"The following is an example of how to implement this. See the GUITest sample in the SDK for a complete working example."}),"\n",(0,i.jsx)(n.p,{children:"Java:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"@Override\npublic void onPurchasesUpdated(BillingResult billingResult, List<Purchase> purchases) {\n    if (billingResult.getResponseCode() == BillingClient.BillingResponseCode.OK && purchases != null) {\n        // Successful purchase\n        for (Purchase purchase : purchases) {\n            // Get the json receipt\n            String jsonReceipt = purchase.getOriginalJson();\n\n            // Pass it to C++\n            nativeOnPurchaseSuccess(jsonReceipt);\n        }\n    } else {\n        // Handle failed purchase\n    }\n}\n\n// Native callback\nprivate native void nativeOnPurchaseSuccess(String jsonReceipt);\n"})}),"\n",(0,i.jsx)(n.p,{children:"C++:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:'extern "C"\n{\n  JNIEXPORT void Java_com_modio_gui_1test_BillingHelper_nativeOnPurchaseSuccess(JNIEnv* env, jclass clazz, jstring jsonReceipt) \n  {\n    const char* receipt = env->GetStringUTFChars(jsonReceipt, nullptr);\n\n    Modio::EntitlementParams EntitlementParams;\n    EntitlementParams.ExtendedParameters.emplace(Modio::Detail::Constants::APIStrings::Receipt, receipt);\n    Modio::RefreshUserEntitlementsAsync(\n      EntitlementParams,\n      [](Modio::ErrorCode ec, Modio::Optional<Modio::EntitlementConsumptionStatusList> entitlementList) {\n        if (ec)\n        {\n          // Handle error\n        }\n        else\n        {\n          // Get the number of entitlements\n          int entitlementCount = entitlementList.value().GetTotalResultCount();\n          Modio::Detail::Logger().Log(Modio::LogLevel::Info, Modio::LogCategory::Test,\n                        "Number of entitlements returned: {}", entitlementCount);\n\n          // Get information about each entitlement\n          for (int index = 0; index < entitlementCount; index++)\n          {\n            size_t i = static_cast<size_t>(index);\n            Modio::Detail::Logger().Log(Modio::LogLevel::Info, Modio::LogCategory::Test,\n                          "Entitelement Id : {} , Consumed : {} , ProductId : {} ",\n                          entitlementList.value()[i].TransactionId,\n                          entitlementList.value()[i].EntitlementConsumed,\n                          entitlementList.value()[i].SkuId);\n          }\n        }\n      });\n\n      env->ReleaseStringUTFChars(jsonReceipt, receipt);\n  }\n}\n'})})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>a});var i=t(6540);const o={},s=i.createContext(o);function r(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);