"use strict";(self.webpackChunkmodio_docs=self.webpackChunkmodio_docs||[]).push([[2962],{1069:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>s,metadata:()=>r,toc:()=>l});var i=n(4848),a=n(8453);const s={id:"cpp-authentication",title:"User Authentication",slug:"/cppsdk/user-authentication"},o="User Authentication for C++ SDK",r={id:"game-integration/cppsdk/getting-started/cpp-authentication",title:"User Authentication",description:"Authentication is an essential part of user and server communication with mod.io. There are two ways for user accounts to access our service: email authentication and single sign on (SSO) through an external authentication partner.",source:"@site/public/en-us/game-integration/cppsdk/getting-started/cpp-authentication.mdx",sourceDirName:"game-integration/cppsdk/getting-started",slug:"/cppsdk/user-authentication",permalink:"/cppsdk/user-authentication",draft:!1,unlisted:!1,editUrl:"https://github.com/modio/modio-docs/tree/main/public/en-us/game-integration/cppsdk/getting-started/cpp-authentication.mdx",tags:[],version:"current",frontMatter:{id:"cpp-authentication",title:"User Authentication",slug:"/cppsdk/user-authentication"},sidebar:"sidebar",previous:{title:"Structure & Error Handling",permalink:"/cppsdk/structure"},next:{title:"Searching for UGC",permalink:"/cppsdk/searching-ugc"}},c={},l=[{value:"Email authentication",id:"email-authentication",level:2},{value:"SSO/external authentication",id:"ssoexternal-authentication",level:2},{value:"Recommended flow",id:"recommended-flow",level:3},{value:"Authentication examples",id:"authentication-examples",level:2},{value:"Epic Games authentication example",id:"epic-games-authentication-example",level:3},{value:"Steam authentication example",id:"steam-authentication-example",level:3},{value:"GOG authentication example",id:"gog-authentication-example",level:3},{value:"Next steps",id:"next-steps",level:2}];function d(e){const t={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h1,{id:"user-authentication-for-c-sdk",children:"User Authentication for C++ SDK"}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.a,{href:"https://docs.mod.io/authentication/",children:"Authentication"})," is an essential part of user and server communication with mod.io. There are two ways for user accounts to access our service: email authentication and single sign on (SSO) through an external authentication partner."]}),"\n",(0,i.jsx)(t.p,{children:"This guide covers:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"#email-authentication",children:"Email authentication"})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"#ssoexternal-authentication",children:"SSO/external authentication"})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"#authentication-examples",children:"Authentication examples"})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"#next-steps",children:"Next steps"})}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"email-authentication",children:"Email authentication"}),"\n",(0,i.jsx)(t.p,{children:"mod.io allows users to create an account on the mod.io website using an email address. Once the user has accepted the mod.io Terms of Use and created an account, they can use that email address to log in and access mod.io services in your game."}),"\n",(0,i.jsx)(t.p,{children:"Email authentication involves:"}),"\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsx)(t.li,{children:"Submitting the user's email address"}),"\n",(0,i.jsx)(t.li,{children:"The user retrieving the one-time code mod.io sends to that address (externally to your application)"}),"\n",(0,i.jsx)(t.li,{children:"Submitting the code provided by the user"}),"\n"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-cpp",children:"Modio::RequestEmailAuthCodeAsync(Modio::EmailAddress(UserProvidedEmailAddress), [](Modio::ErrorCode ec)\n{\n    // Handle errors if ec is truthy\n});\n\n// some time later, after the user inputs their authentication code\n\nModio::AuthenticateUserEmailAsync(Modio::EmailAuthCode(UserProvidedAuthCode), [](Modio::ErrorCode ec) {\n\t\tif (ec)\n\t\t{\n            // Authentication failure, inspect ec to determine what information to provide to the end user\n\t\t}\n\t\telse\n\t\t{\n            // User is now authenticated and able to manage their subscriptions via SDK calls\n\t\t}\n\t});\n\n"})}),"\n",(0,i.jsx)(t.admonition,{type:"note",children:(0,i.jsx)(t.p,{children:"Email authentication is not recommended for production releases. We strongly recommend the use of platform SSO to provide a seamless authentication experience for your players. Additional platform functionality such as platform display names, avatars and console certification requirements are supported via SSO flows."})}),"\n",(0,i.jsx)(t.h2,{id:"ssoexternal-authentication",children:"SSO/external authentication"}),"\n",(0,i.jsx)(t.p,{children:"There are two types of SSO to consider:"}),"\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.a,{href:"https://docs.mod.io/authentication/openid/",children:(0,i.jsx)(t.strong,{children:"Custom SSO"})}),": Custom SSO harnesses your studio's authentication process as the single point of authentication."]}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.a,{href:"https://docs.mod.io/authentication/platform/",children:(0,i.jsx)(t.strong,{children:"Platform SSO"})}),": Platform SSO uses a given platform's authentication process as the single point of authentication."]}),"\n",(0,i.jsx)(t.p,{children:"The platforms included in this process are:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"https://docs.mod.io/platforms/gdk/#authentication",children:"Xbox Live"})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"https://docs.mod.io/platforms/steam/authentication",children:"Steam"})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"https://docs.mod.io/platforms/gog/authentication",children:"GOG Galaxy"})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"https://docs.mod.io/platforms/switch/#authentication",children:"Nintendo Switch"})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"https://docs.mod.io/platforms/playstation/#authentication",children:"PlayStation\u2122Network"})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"https://docs.mod.io/platforms/epic/authentication",children:"Epic Online Services"})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"https://docs.mod.io/platforms/meta/authentication",children:"Meta Quest"})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"https://docs.mod.io/platforms/google/authentication",children:"Google"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(t.p,{children:["Each platform has their own requirements and prerequisites for performing SSO.  Platform-specific authentication can be found in the respective ",(0,i.jsx)(t.a,{href:"https://docs.mod.io/getting-started/#expand-with-cross-platform-functionality",children:"platform documentation"}),"."]}),"\n",(0,i.jsxs)(t.p,{children:["To use SSO with mod.io, a user must have accepted the mod.io ",(0,i.jsx)(t.a,{href:"https://docs.mod.io/terms-user-consent/",children:"Terms of Use"})," in order to create an account."]}),"\n",(0,i.jsx)(t.h3,{id:"recommended-flow",children:"Recommended flow"}),"\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsxs)(t.li,{children:["Call ",(0,i.jsx)(t.a,{href:"/cppsdk/refdocs/#authenticateuserexternalasync",children:"AuthenticateUserExternalAsync"})," , passing in any provider-specific parameters, setting ",(0,i.jsx)(t.code,{children:"AuthenticationParams::bUserHasAcceptedTerms"})," to false, and indicating which authentication provider you wish to use"]}),"\n",(0,i.jsxs)(t.li,{children:["Check the error code in the callback - if it indicates the user has not yet created an account or accepted the terms, call ",(0,i.jsx)(t.a,{href:"/cppsdk/refdocs/#gettermsofuseasync",children:"GetTermsOfUseAsync"})," and display the provided information to your user"]}),"\n",(0,i.jsxs)(t.li,{children:["If the user clicks the OK/affirmative button on your screen displaying the terms of use, repeat the call in step 1 but setting ",(0,i.jsx)(t.code,{children:"AuthenticationParams::bUserHasAcceptedTerms"})," to ",(0,i.jsx)(t.strong,{children:"true"})," for this single authentication request only. For all subsequent authentication attempts, this parameter should be set back to ",(0,i.jsx)(t.strong,{children:"false"})," - the system will automatically authenticate the user if they've already accepted the latest terms. Otherwise, the system will return an error (",(0,i.jsx)(t.code,{children:"403 Forbidden (error_ref 11074)"}),") allowing you to show the updated terms"]}),"\n",(0,i.jsx)(t.li,{children:"Check the error code in the callback - a false-y error code indicates that authentication was successful, and users can now install and manage UGC and subscriptions."}),"\n"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-cpp",children:'Modio::AuthenticationParams UserParams;\nUserParams.AuthToken = "AuthenticationToken";\nUserParams.UserEmail = "UserEmail";\nUserParams.bUserHasAcceptedTerms = false; // Always start with false\n\nModio::AuthenticateUserExternalAsync(UserParams,Provider,[Provider](Modio::ErrorCode ec)\n{\n    if (ec)\n    {\n        if (ec == Modio::ApiError::UserNoAcceptTermsOfUse)\n        {\n            // We need to display the terms of use to the user\n            Modio::GetTermsOfUseAsync([](Modio::ErrorCode ec, Modio::Optional<Modio::Terms> Terms)\n            {\n                if (ec)\n                {\n                    // something went wrong fetching the terms, inspect ec to decide what to do\n                }\n                else\n                {\n                    // Display the terms of use to the user, remember not to block in the callback here!\n                    NonBlockingFunctionThatDisplaysTheTermsOfUse(Terms);\n                }\n            });\n        }\n    }\n});\n\n// Later sometime, when your user clicks accept on the terms of use\nUserParams.bUserHasAcceptedTerms = true;\nModio::AuthenticateUserExternalAsync(UserParams,Provider,[](Modio::ErrorCode ec){/* ... */});\n\n'})}),"\n",(0,i.jsx)(t.admonition,{type:"note",children:(0,i.jsx)(t.p,{children:"Changing users via AuthenticateUserExternalAsync (ie performing an authentication for a different user) will disable mod management."})}),"\n",(0,i.jsx)(t.admonition,{type:"important",children:(0,i.jsxs)(t.p,{children:["The ",(0,i.jsx)(t.code,{children:"bUserHasAcceptedTerms"})," parameter should only be set to true for the specific authentication request made immediately after the user accepts the terms dialog. For all subsequent authentication attempts, this parameter should be set to false. If the user has already accepted the latest terms, they will be authenticated automatically. If the terms have been updated since their last acceptance, setting this parameter to false will trigger the appropriate error (403 Forbidden, error_ref 11074) allowing you to show the updated terms."]})}),"\n",(0,i.jsx)(t.admonition,{type:"important",children:(0,i.jsxs)(t.p,{children:["The ",(0,i.jsx)(t.code,{children:"Modio::AuthenticationProvider"})," is different to the ",(0,i.jsx)(t.code,{children:"PortalInUse"})," initialization parameter (",(0,i.jsx)(t.code,{children:"Modio::Portal"}),"). For example, the user may authenticate through Google, while using the Steam portal.\n",(0,i.jsx)(t.code,{children:"DisplayNamePortal"})," will be null if a portal is not defined, and it will reflect changes in the username of the corresponding portal that were set using the initialization step.\nFor example, if the users Steam username is changed - ",(0,i.jsx)(t.code,{children:"DisplayNamePortal"})," will return the new username once the SDK is reauthenticated."]})}),"\n",(0,i.jsx)(t.h2,{id:"authentication-examples",children:"Authentication examples"}),"\n",(0,i.jsxs)(t.p,{children:["Below are exmaples for the authentication process for the Epic Games, Steam and GOG platforms. You can learn more about these process in our ",(0,i.jsx)(t.a,{href:"https://docs.mod.io/platforms/pc",children:"PC Platform Authentication Guides"}),"."]}),"\n",(0,i.jsx)(t.h3,{id:"epic-games-authentication-example",children:"Epic Games authentication example"}),"\n",(0,i.jsxs)(t.p,{children:["In order to use Epic Games Authentication, you must ensure that you have ",(0,i.jsx)(t.a,{href:"https://docs.mod.io/platforms/epic/authentication",children:"configured Epic Account Services for your title"}),". Once you have done this, you can request an ID Token for a user that has been logged into Epic. You must ensure that the scopes you are authentication with match the scopes for the application you are configuring in EAS."]}),"\n",(0,i.jsx)(t.admonition,{type:"note",children:(0,i.jsxs)(t.p,{children:["If your title is not yet live, you can use Epic's DevAuthTool and the ",(0,i.jsx)(t.code,{children:"EOS_LCT_Developer"})," credential type for testing."]})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-cpp",children:'static void EOS_CALL LoginCompleteCallbackFn(const EOS_Auth_LoginCallbackInfo* Data)\n{\n\tEOS_Auth_CopyIdTokenOptions IdTokenOptions;\n\tIdTokenOptions.AccountId = Data->LocalUserId;\n\tIdTokenOptions.ApiVersion = EOS_AUTH_COPYIDTOKEN_API_LATEST;\n\n\tEOS_Auth_IdToken* IdToken;\n\tEOS_EResult Result = EOS_Auth_CopyIdToken(ModioTest::EpicAuthHelper::instance().AuthHandle, &IdTokenOptions, &IdToken);\n\n\tif (Result == EOS_EResult::EOS_Success)\n\t{\n\t\tstd::string Token = IdToken->JsonWebToken;\n\n\t\tModio::AuthenticationParams User;\n\t\tUser.AuthToken = Token;\n\t\tUser.bURLEncodeAuthToken = true;\n\n\t\t// Note: bUserHasAcceptedTerms should only be set to true if the user has just accepted the terms dialog\n\t\t// Otherwise it should be false - the system will authenticate automatically if the user has accepted the latest terms\n\t\tUser.bUserHasAcceptedTerms = true;\n\n\t\tModio::AuthenticateUserExternalAsync(User, Modio::AuthenticationProvider::Epic, [](Modio::ErrorCode ec) {\n\t\t\tif (ec)\n\t\t\t{\n\t\t\t\tstd::cout << "Failed to authenticate to mod.io: " << ec.message() << std::endl;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tstd::cout << "Authentication complete" << std::endl;\n\t\t\t}\n\t\t});\n\t}\n\telse\n\t{\n\t\tstd::cout << "Failed to get Epic ID Token";\n\t}\n}\n'})}),"\n",(0,i.jsx)(t.h3,{id:"steam-authentication-example",children:"Steam authentication example"}),"\n",(0,i.jsx)(t.admonition,{type:"note",children:(0,i.jsx)(t.p,{children:"This functionality is demonstrated in advanced example 01_SteamAuthAndEntitlements"})}),"\n",(0,i.jsxs)(t.p,{children:["In order to use the Steam authentication functionality, you must ",(0,i.jsx)(t.a,{href:"https://docs.mod.io/platforms/steam/authentication",children:"configure your game's Encrypted App Ticket Key from Steamworks"}),". Once you have done that, you can request an Encrypted App Ticket for an authenticated user as follows, replacing your class references to your own Steam Subsystem as appropriate."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-cpp",children:"uint32 k_unSecretData = 0x5444;\nSteamAPICall_t hSteamAPICall = SteamUser()->RequestEncryptedAppTicket(&k_unSecretData, sizeof(k_unSecretData));\nSteamAuthHelperInstance->m_SteamCallResultEncryptedAppTicket.Set(hSteamAPICall, SteamAuthHelperInstance, &SteamAuthHelper::OnEncryptedAppTicketResponse);\n"})}),"\n",(0,i.jsxs)(t.p,{children:["Ensure that you have defined a Steam CCallResult to listen for a callback, such as ",(0,i.jsx)(t.code,{children:"CCallResult<SteamAuthHelper, EncryptedAppTicketResponse_t> m_SteamCallResultEncryptedAppTicket;"}),"."]}),"\n",(0,i.jsx)(t.p,{children:"Once you successfully receive that callback, you can get the Encrypted App Ticket as follows, ensuring you Base64 encode it."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-cpp",children:'std::string EncodedSteamAuthTicket;\n\nunsigned char rgubTicket[1024];\nuint32 cubTicket;\nif (SteamUser()->GetEncryptedAppTicket(rgubTicket, sizeof(rgubTicket), &cubTicket))\n{\n\t\t\t\tEncodedSteamAuthTicket = base64_encode(rgubTicket, cubTicket);\n\t\t\t\tstd::cout << "Steam App Ticket received" << std::endl;\n}\n'})}),"\n",(0,i.jsx)(t.p,{children:"Finally, once you have your Base64 encoded app ticket, you can SSO to mod.io as follows:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-cpp",children:'Modio::AuthenticationParams AuthParams;\nAuthParams.AuthToken = EncodedSteamAuthTicket;\nAuthParams.bURLEncodeAuthToken = true;\n\n// Note: bUserHasAcceptedTerms should only be set to true if the user has just accepted the terms dialog\n// Otherwise it should be false - the system will authenticate automatically if the user has accepted the latest terms\nAuthParams.bUserHasAcceptedTerms = true;\n\nModio::AuthenticateUserExternalAsync(\n\tAuthParams, Modio::AuthenticationProvider::Steam, [&](Modio::ErrorCode ec) {\n\t\tif (ec)\n\t\t{\n\t\t\tstd::cout << "Failed to authenticate to mod.io: " << ec.message() << std::endl;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstd::cout << "Authentication complete" << std::endl;\n\t\t}\n\t});\n'})}),"\n",(0,i.jsx)(t.hr,{}),"\n",(0,i.jsx)(t.h3,{id:"gog-authentication-example",children:"GOG authentication example"}),"\n",(0,i.jsxs)(t.p,{children:["In order to use the GOG authentication functionality, you must ",(0,i.jsx)(t.a,{href:"https://docs.mod.io/platforms/gog/authentication",children:"configure your game's Encrypted App Ticket Key from GOG"}),". Ensure that you are signing into GOG using ",(0,i.jsx)(t.code,{children:"galaxy::api::User()->SignInGalaxy"}),". Once you have done that, you can request an Encrypted App Ticket for an authenticated user as follows, replacing your class references to your own GOG as appropriate."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-cpp",children:"galaxy::api::User()->RequestEncryptedAppTicket(nullptr, 0, &GOGAuthHelperInstance);\n"})}),"\n",(0,i.jsxs)(t.p,{children:["In your authentication helper, ensure that you are inheriting from ",(0,i.jsx)(t.code,{children:"galaxy::api::GlobalEncryptedAppTicketListener"})," to get the result of the the app ticket request, via the ",(0,i.jsx)(t.code,{children:"OnEncryptedAppTicketRetrieveSuccess()"})," method."]}),"\n",(0,i.jsx)(t.p,{children:"Once you receive that callback, you can get the value of the encrypted app ticket as follows:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-cpp",children:"unsigned char ticket[1024];\nuint32_t ticketLength;\n\ngalaxy::api::User()->GetEncryptedAppTicket(ticket, sizeof(ticket), ticketLength);\n\nstd::string AuthTicket;\nAuthTicket.assign(ticket, std::find(ticket, ticket + ticketLength, '\\0'));\n"})}),"\n",(0,i.jsx)(t.p,{children:"Finally, you can SSO to mod.io as follows:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-cpp",children:'Modio::AuthenticationParams AuthParams;\nAuthParams.AuthToken = AuthTicket;\nAuthParams.bURLEncodeAuthToken = true;\n\n// Note: bUserHasAcceptedTerms should only be set to true if the user has just accepted the terms dialog\n// Otherwise it should be false - the system will authenticate automatically if the user has accepted the latest terms\nAuthParams.bUserHasAcceptedTerms = true;\n\nModio::AuthenticateUserExternalAsync(\n\tAuthParams, Modio::AuthenticationProvider::GoG, [&](Modio::ErrorCode ec) {\n\t\tif (ec)\n\t\t{\n\t\t\tstd::cout << "Failed to authenticate to mod.io: " << ec.message() << std::endl;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstd::cout << "Authentication complete" << std::endl;\n\t\t}\n\t});\n'})}),"\n",(0,i.jsx)(t.admonition,{type:"note",children:(0,i.jsxs)(t.p,{children:["Note that you do not need to base64 encode the app ticket that you receive from GOG; you only need to ensure it is URL encoded, either by setting ",(0,i.jsx)(t.code,{children:"bURLEncodeAuthToken=true"})," or doing it yourself before passing it to ",(0,i.jsx)(t.code,{children:"AuthenticateUserExternalAsync"}),"."]})}),"\n",(0,i.jsx)(t.h2,{id:"next-steps",children:"Next steps"}),"\n",(0,i.jsxs)(t.p,{children:["Now that you've set up the authentication process, the next step is to allow users to find UGC by implementing the ",(0,i.jsx)(t.a,{href:"/cppsdk/searching-ugc",children:"Searching for UGC"})," guide."]}),"\n",(0,i.jsxs)(t.p,{children:["If you've already done this, we recommend working your way through the ",(0,i.jsx)(t.a,{href:"/cppsdk/#c-sdk-core-setup-guides",children:"C++ SDK Getting Started Guides"})," as they will teach you how to implement the mod.io fundamentals before moving onto exploring our ",(0,i.jsx)(t.a,{href:"/features",children:"Features"}),"."]})]})}function h(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>r});var i=n(6540);const a={},s=i.createContext(a);function o(e){const t=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),i.createElement(s.Provider,{value:t},e.children)}}}]);