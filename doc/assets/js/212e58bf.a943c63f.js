"use strict";(self.webpackChunkmodio_docs=self.webpackChunkmodio_docs||[]).push([[8224],{684:(e,s,t)=>{t.r(s),t.d(s,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>r,metadata:()=>o,toc:()=>d});var n=t(4848),i=t(8453);const r={id:"cpp-metrics",title:"Metrics",slug:"/cppsdk/metrics"},a="Metrics for C++ SDK",o={id:"game-integration/cppsdk/feature-guides/cpp-metrics",title:"Metrics",description:"The mod.io SDK supports all of the mod.io metrics features.",source:"@site/public/en-us/game-integration/cppsdk/feature-guides/cpp-metrics.mdx",sourceDirName:"game-integration/cppsdk/feature-guides",slug:"/cppsdk/metrics",permalink:"/cppsdk/metrics",draft:!1,unlisted:!1,editUrl:"https://github.com/modio/modio-docs/tree/main/public/en-us/game-integration/cppsdk/feature-guides/cpp-metrics.mdx",tags:[],version:"current",frontMatter:{id:"cpp-metrics",title:"Metrics",slug:"/cppsdk/metrics"},sidebar:"sidebar",previous:{title:"Marketplace",permalink:"/cppsdk/marketplace"},next:{title:"Temporary Mod Sets",permalink:"/cppsdk/temporary-mods"}},c={},d=[{value:"Playtime Metrics",id:"playtime-metrics",level:2},{value:"Initialization",id:"initialization",level:3},{value:"Starting a session",id:"starting-a-session",level:3},{value:"Metrics heartbeat",id:"metrics-heartbeat",level:3},{value:"Ending a session",id:"ending-a-session",level:3}];function l(e){const s={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(s.h1,{id:"metrics-for-c-sdk",children:"Metrics for C++ SDK"}),"\n",(0,n.jsx)(s.p,{children:"The mod.io SDK supports all of the mod.io metrics features."}),"\n",(0,n.jsxs)(s.p,{children:["Check out ",(0,n.jsx)(s.a,{href:"https://docs.mod.io/metrics/",children:"Metrics"})," for an overview of what the various Metrics dashboard options offer."]}),"\n",(0,n.jsx)(s.h2,{id:"playtime-metrics",children:"Playtime Metrics"}),"\n",(0,n.jsxs)(s.p,{children:["The main focus of this guide will be ",(0,n.jsx)(s.a,{href:"https://docs.mod.io/metrics/game#play-sessions",children:"Playtime Metrics"}),", allowing you to track which UGC your players interact with most frequently. Once you start a play session, you can keep that session alive via a heartbeat (automatically called, or manually handled) before ending that session."]}),"\n",(0,n.jsx)(s.admonition,{title:"Premium Feature",type:"note",children:(0,n.jsxs)(s.p,{children:["Playtime Metrics is a premium feature. If you are interested in activating this feature, contact us at ",(0,n.jsx)(s.a,{href:"mailto:developers@mod.io",children:"developers@mod.io"}),"."]})}),"\n",(0,n.jsx)(s.p,{children:"This guide covers:"}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsx)(s.li,{children:(0,n.jsx)(s.a,{href:"#initialization",children:"Initialization"})}),"\n",(0,n.jsx)(s.li,{children:(0,n.jsx)(s.a,{href:"#starting-a-session",children:"Starting a session"})}),"\n",(0,n.jsx)(s.li,{children:(0,n.jsx)(s.a,{href:"#metrics-heartbeat",children:"Metrics heartbeat"})}),"\n",(0,n.jsx)(s.li,{children:(0,n.jsx)(s.a,{href:"#ending-a-session",children:"Ending a session"})}),"\n"]}),"\n",(0,n.jsx)(s.p,{children:"Metrics based on the platform and portal, are transparently taken care of with no additional consideration needed when using the SDK."}),"\n",(0,n.jsx)(s.h3,{id:"initialization",children:"Initialization"}),"\n",(0,n.jsxs)(s.p,{children:["The mod.io metrics features are enabled as part of generating a Metrics Secret Key your API settings in your game dashboard, e.g. ",(0,n.jsx)(s.a,{href:"https://mod.io/g/game-name/admin/api-key",children:"https://mod.io/g/game-name/admin/api-key"}),". Once this key has been generated, you need to pass it in as an ExtendedParameters field in your InitializeOptions when Initializing the mod.io SDK, e.g.:"]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-cpp",children:'Modio::InitializeOptions initializeOptions;\ninitializeOptions.ExtendedParameters["MetricsSecretKey"] = "00000000-1111-2222-3333-444444444444";\n'})}),"\n",(0,n.jsxs)(s.p,{children:["Failing to set up the Metrics Secret Key will result in a ",(0,n.jsx)(s.code,{children:"Modio::MetricsError::SessionNotInitialized"})," error being returned when using the metrics functionality."]}),"\n",(0,n.jsx)(s.h3,{id:"starting-a-session",children:"Starting a session"}),"\n",(0,n.jsxs)(s.p,{children:["You can call ",(0,n.jsx)(s.a,{href:"/cppsdk/refdocs/#metricssessionstartasync",children:(0,n.jsx)(s.code,{children:"MetricsSessionStartAsync"})})," to start a new session tracking the usage of mods in the context of your game. You'll notice that ",(0,n.jsx)(s.code,{children:"MetricsSessionStartAsync"})," takes a ",(0,n.jsx)(s.a,{href:"/cppsdk/refdocs/#MetricsSessionParams",children:(0,n.jsx)(s.code,{children:"MetricsSessionParams"})})," object as its parameter. This contains an optional Session Id, as well as a required vector of mods to track."]}),"\n",(0,n.jsx)(s.admonition,{type:"note",children:(0,n.jsx)(s.p,{children:"If a Session Id is not provided, a random one will be created for you."})}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-cpp",children:"Modio::MetricsSessionParams Params = Modio::MetricsSessionParams {{}, ModIds};\n\nModio::MetricsSessionStartAsync(Params, [](Modio::ErrorCode ec) {\n{\n\tif (ec)\n\t{\n\t\t// Error has occurred while attempting to start a session\n\t}\n\telse\n\t{\n\t\t// Session started successfully\n\t}\n});\n"})}),"\n",(0,n.jsxs)(s.p,{children:["The Metrics Session Params accepts an optional Session Id in the form of a ",(0,n.jsx)(s.code,{children:"Modio::Guid"})," which you may want to use to associate the new session with any supplementary telemetry you are gathering in your game."]}),"\n",(0,n.jsx)(s.h3,{id:"metrics-heartbeat",children:"Metrics heartbeat"}),"\n",(0,n.jsx)(s.p,{children:"To ensure that the session is kept alive, a heartbeat is required to be submitted at most every 5 minutes. We recommend doing this a bit earlier than the threshold to ensure you do not miss the window."}),"\n",(0,n.jsxs)(s.p,{children:["There are two methods provided to control the behaviour of the heart beat, ",(0,n.jsx)(s.a,{href:"/cppsdk/refdocs/#metricssessionsendheartbeatonceasync",children:(0,n.jsx)(s.code,{children:"MetricsSessionSendHeartbeatOnceAsync"})})," which you can call at your desired precision, as well as a single call and forget ",(0,n.jsx)(s.a,{href:"/cppsdk/refdocs/#metricssessionsendheartbeatatintervalasync",children:(0,n.jsx)(s.code,{children:"MetricsSessionSendHeartbeatAtIntervalAsync"})})," with a desired interval."]}),"\n",(0,n.jsxs)(s.p,{children:["Calling ",(0,n.jsx)(s.code,{children:"MetricsSessionSendHeartbeatOnceAsync"})," will submit a single heartbeat, and return an error code if something went wrong. If no error has occured, the heartbeat has been successfully sent."]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-cpp",children:"Modio::MetricsSessionSendHeartbeatOnceAsync([](Modio::ErrorCode ec) \n{\n\tif (ec)\n\t{\n\t\t// Error has occurred while submitting a heartbeat\n\t}\n\telse\n\t{\n\t\t// Heartbeat successfully sent\n\t}\n});\n"})}),"\n",(0,n.jsxs)(s.p,{children:["Calling ",(0,n.jsx)(s.code,{children:"MetricsSessionSendHeartbeatAtIntervalAsync"})," requires a parameter with the desired interval frequency in seconds. An error code will be returned if something went wrong, otherwise you will receive a false-y error if the interval loop has been shut down successfully (such as ending a session)."]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-cpp",children:"uint32_t IntervalSeconds = 150;\nModio::MetricsSessionSendHeartbeatAtIntervalAsync(IntervalSeconds, [](Modio::ErrorCode ec) \n{\n\tif (ec)\n\t{\n\t\t// Error has occurred while submitting a heartbeat\n\t}\n\telse\n\t{\n\t\t// Heartbeat interval loop has been shut down successfully\n\t}\n});\n"})}),"\n",(0,n.jsx)(s.h3,{id:"ending-a-session",children:"Ending a session"}),"\n",(0,n.jsxs)(s.p,{children:["To complete a session, for example when finishing a match, or quitting out of your game, you can call ",(0,n.jsx)(s.a,{href:"/cppsdk/refdocs/#metricssessionendasync",children:(0,n.jsx)(s.code,{children:"MetricsSessionEndAsync"})}),".\nAs with the other calls, you will receive an error if anything has gone wrong, otherwise the operation successfully completed."]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-cpp",children:"Modio::MetricsSessionEndAsync([](Modio::ErrorCode ec) \n{\n\tif (ec)\n\t{\n\t\t// Error has occurred while attempting to end a session\n\t}\n\telse\n\t{\n\t\t// Metrics session successfully completed\n\t}\n});\n"})})]})}function h(e={}){const{wrapper:s}={...(0,i.R)(),...e.components};return s?(0,n.jsx)(s,{...e,children:(0,n.jsx)(l,{...e})}):l(e)}},8453:(e,s,t)=>{t.d(s,{R:()=>a,x:()=>o});var n=t(6540);const i={},r=n.createContext(i);function a(e){const s=n.useContext(r);return n.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function o(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),n.createElement(r.Provider,{value:s},e.children)}}}]);