"use strict";(self.webpackChunkmodio_docs=self.webpackChunkmodio_docs||[]).push([[1634],{7514:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>r,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var t=i(4848),d=i(8453);const o={id:"cpp-adding-ugc",title:"Adding UGC",slug:"/cppsdk/adding-ugc"},a="Adding UGC",s={id:"game-integration/cppsdk/getting-started/cpp-adding-ugc",title:"Adding UGC",description:"Submitting UGC from inside your game and making it visible to other players involves two steps: submitting the UGC and submitting the UGC's data.",source:"@site/public/en-us/game-integration/cppsdk/getting-started/cpp-adding-ugc.mdx",sourceDirName:"game-integration/cppsdk/getting-started",slug:"/cppsdk/adding-ugc",permalink:"/cppsdk/adding-ugc",draft:!1,unlisted:!1,editUrl:"https://github.com/modio/modio-docs/tree/main/public/en-us/game-integration/cppsdk/getting-started/cpp-adding-ugc.mdx",tags:[],version:"current",frontMatter:{id:"cpp-adding-ugc",title:"Adding UGC",slug:"/cppsdk/adding-ugc"},sidebar:"sidebar",previous:{title:"Subscribing to UGC",permalink:"/cppsdk/subscribing"},next:{title:"Collections",permalink:"/cppsdk/collections"}},r={},c=[{value:"Submitting new UGC",id:"submitting-new-ugc",level:2},{value:"Submitting UGC data",id:"submitting-ugc-data",level:2},{value:"Edit existing UGC",id:"edit-existing-ugc",level:2},{value:"Next steps",id:"next-steps",level:2}];function l(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",hr:"hr",li:"li",p:"p",pre:"pre",ul:"ul",...(0,d.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"adding-ugc",children:"Adding UGC"}),"\n",(0,t.jsx)(n.p,{children:"Submitting UGC from inside your game and making it visible to other players involves two steps: submitting the UGC and submitting the UGC's data."}),"\n",(0,t.jsx)(n.p,{children:"This guide covers:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#submitting-new-ugc",children:"Submitting new UGC"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#submitting-ugc-data",children:"Submitting UGC data"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#edit-existing-ugc",children:"Edit existing UGC"})}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"submitting-new-ugc",children:"Submitting new UGC"}),"\n",(0,t.jsxs)(n.p,{children:["To submit UGC, first create a mod handle using ",(0,t.jsx)(n.a,{href:"/cppsdk/refdocs/#getmodcreationhandle",children:(0,t.jsx)(n.code,{children:"GetModCreationHandle"})})," and use that handle when calling ",(0,t.jsx)(n.a,{href:"/cppsdk/refdocs/#submitnewmodasync",children:(0,t.jsx)(n.code,{children:"SubmitNewModAsync"})}),". Note that the newly created mod will remain hidden until a mod file is added in the next step."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:'\nModio::ModCreationHandle Handle = GetModCreationHandle();\n\nModio::CreateModParams Params;\n\nParams.PathToLogoFile = "C:/temp/image.png";\nParams.Name = "My Awesome Mod";\nParams.Summary = "This is an amazing mod";\n// add any additional optional parameters\n\nModio::SubmitNewModAsync(Handle, Params, [](Modio::ErrorCode ec, Modio::Optional<Modio::ModID> NewModID)\n{\n    if (ec)\n    {\n        // error handling\n    }\n    else\n    {\n        // capture NewModID as needed for subsequent use\n    }\n});\n\n'})}),"\n",(0,t.jsx)(n.h2,{id:"submitting-ugc-data",children:"Submitting UGC data"}),"\n",(0,t.jsxs)(n.p,{children:["Once you have successfully submitted a piece of UGC, you can submit the UGC's data, also known as a 'mod file', using ",(0,t.jsx)(n.a,{href:"/cppsdk/refdocs/#submitnewmodfileformod",children:(0,t.jsx)(n.code,{children:"SubmitNewModFileForMod"})}),". When you submit a file, pass a ",(0,t.jsx)(n.code,{children:"Modio::CreateModFileParams"})," containing the directory of the files that you want to submit. The SDK will compress this folder into a zip file and upload it as the active version of the mod. Note that there is no callback for this method; you'll be notified of the completed upload by the Mod Management callback."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:'\nModio::CreateModFileParams Params;\n\nParams.RootDirectory = "C:/temp/mod_folder";\n// add any additional optional parameters\n\n// Use NewModID returned in SubmitNewModAsync() callback\nModio::SubmitNewModFileForMod(NewModID, Params);\n\n'})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"edit-existing-ugc",children:"Edit existing UGC"}),"\n",(0,t.jsxs)(n.p,{children:["UGC details can be edited in-game using ",(0,t.jsx)(n.a,{href:"/cppsdk/refdocs/#submitmodchangesasync",children:(0,t.jsx)(n.code,{children:"SubmitModChangesAsync"})}),".  This function allows you to edit multiple parameters with a single call.  It takes a ",(0,t.jsx)(n.code,{children:"Modio::ModID"})," of the UGC to edit, a ",(0,t.jsx)(n.code,{children:"Modio::EditModParams"})," containing one or more parameters to be altered, and a callback that will contain an optional updated ",(0,t.jsx)(n.code,{children:"Modio::ModInfo"})," object on success."]}),"\n",(0,t.jsxs)(n.p,{children:["Note that updating the mod file itself is done via ",(0,t.jsx)(n.a,{href:"/cppsdk/refdocs/#submitnewmodfileformod",children:(0,t.jsx)(n.code,{children:"SubmitNewModFileForMod"})}),", as detailed above in ",(0,t.jsx)(n.a,{href:"#submitting-ugc-data",children:(0,t.jsx)(n.code,{children:"Submitting UGC data"})}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:'\nModio::EditModParams EditParams;\n\n// Add one or more parameters to edit\nEditParams.Name = "My Edited Mod Name";\nEditParams.Summary = "My edited summary";\n\nModio::SubmitModChangesAsync(ModID, EditParams, [](Modio::ErrorCode ec, Modio::Optional<Modio::ModInfo> UpdatedModInfo)\n{\n    if (ec)\n    {\n        // error handling\n    }\n    else\n    {\n        // capture or display UpdatedModInfo as needed\n    }\n});\n\n'})}),"\n",(0,t.jsx)(n.h2,{id:"next-steps",children:"Next steps"}),"\n",(0,t.jsxs)(n.p,{children:["Congratulations! You have completed all the ",(0,t.jsx)(n.a,{href:"/cppsdk/#c-sdk-core-setup-guides",children:"C++ SDK Getting Started Guides"}),"! Your game should now be equipped with mod.io's core UGC functionally."]}),"\n",(0,t.jsxs)(n.p,{children:["The time's come to customize your game by exploring our ",(0,t.jsx)(n.a,{href:"/features",children:"Features"})," section. Here you can select features that suit your game's requirements."]})]})}function u(e={}){const{wrapper:n}={...(0,d.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>s});var t=i(6540);const d={},o=t.createContext(d);function a(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(d):e.components||d:a(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);