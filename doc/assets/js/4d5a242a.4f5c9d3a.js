"use strict";(self.webpackChunkmodio_docs=self.webpackChunkmodio_docs||[]).push([[1732],{5250:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>h,frontMatter:()=>r,metadata:()=>o,toc:()=>c});var a=n(4848),i=n(8453);const r={id:"cpp-marketplace",title:"Marketplace",slug:"/cppsdk/marketplace"},s="Marketplace for C++ SDK",o={id:"game-integration/cppsdk/feature-guides/cpp-marketplace",title:"Marketplace",description:"The C++ SDK supports a range of Monetization features, allowing your players to purchase UGC, with a share of the revenue split between creators and your studio.",source:"@site/public/en-us/game-integration/cppsdk/feature-guides/cpp-marketplace.mdx",sourceDirName:"game-integration/cppsdk/feature-guides",slug:"/cppsdk/marketplace",permalink:"/cppsdk/marketplace",draft:!1,unlisted:!1,editUrl:"https://github.com/modio/modio-docs/tree/main/public/en-us/game-integration/cppsdk/feature-guides/cpp-marketplace.mdx",tags:[],version:"current",frontMatter:{id:"cpp-marketplace",title:"Marketplace",slug:"/cppsdk/marketplace"},sidebar:"sidebar",previous:{title:"List of Features",permalink:"/cppsdk/feature-guides"},next:{title:"Metrics",permalink:"/cppsdk/metrics"}},l={},c=[{value:"Setup",id:"setup",level:2},{value:"Initialization",id:"initialization",level:3},{value:"Querying for Monetized Content",id:"querying-for-monetized-content",level:3},{value:"Showing user purchases",id:"showing-user-purchases",level:3},{value:"Virtual Currency",id:"virtual-currency",level:3},{value:"Getting the user&#39;s wallet",id:"getting-the-users-wallet",level:4},{value:"Syncing Virtual Currency Entitlements",id:"syncing-virtual-currency-entitlements",level:4},{value:"Purchasing UGC with Virtual Currency",id:"purchasing-ugc-with-virtual-currency",level:4},{value:"USD Marketplace",id:"usd-marketplace",level:3},{value:"Looking Up Platform SKUs",id:"looking-up-platform-skus",level:4},{value:"Platform SKUs: Steam",id:"platform-skus-steam",level:5},{value:"Displaying localized pricing",id:"displaying-localized-pricing",level:4},{value:"Purchasing UGC with Entitlements",id:"purchasing-ugc-with-entitlements",level:4},{value:"Getting a User Delegation Token",id:"getting-a-user-delegation-token",level:3}];function d(e){const t={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",h5:"h5",li:"li",mermaid:"mermaid",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.h1,{id:"marketplace-for-c-sdk",children:"Marketplace for C++ SDK"}),"\n",(0,a.jsxs)(t.p,{children:["The C++ SDK supports a range of ",(0,a.jsx)(t.a,{href:"https://docs.mod.io/monetization/",children:"Monetization"})," features, allowing your players to purchase UGC, with a share of the revenue split between creators and your studio."]}),"\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.a,{href:"https://docs.mod.io/monetization/marketplace",children:"Marketplace"})," is one such feature, exposing the data and functions required to build a UGC store in-game."]}),"\n",(0,a.jsx)(t.p,{children:"mod.io provides two different options for supporting marketplace features within your game - Virtual Currency, and USD Marketplace. You can toggle between these options on your game's monetization dashboard, but you can only ship with one of them enabled and used in your title."}),"\n",(0,a.jsxs)(t.p,{children:["Every platform requires specific setup for monetization features to work. Platform-specific information is available in the relevant ",(0,a.jsx)(t.a,{href:"https://docs.mod.io/getting-started/#expand-with-cross-platform-functionality",children:"Platform Guides"}),"."]}),"\n",(0,a.jsx)(t.p,{children:"Monetization features need to be enabled through the web UI and, if using the virtual currency form of Marketplace through a platform store, will need a service to consume the virtual currency entitlements and apply them to player's mod.io account."}),"\n",(0,a.jsx)(t.admonition,{type:"note",children:(0,a.jsxs)(t.p,{children:["You can use our sandbox test environment at test.mod.io for testing monetization functionality, which allows for simulating real-world payments using dummy credit cards and credentials. When you initialize the SDK, use ",(0,a.jsx)(t.code,{children:"Modio::Environment::Test"})," as the environment parameter, along with your test.mod.io title's GameID and APIKey."]})}),"\n",(0,a.jsx)(t.p,{children:"This guide covers:"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsx)(t.li,{children:(0,a.jsx)(t.a,{href:"#setup",children:"Setup"})}),"\n",(0,a.jsx)(t.li,{children:(0,a.jsx)(t.a,{href:"#querying--purchasing-ugc",children:"Querying & purchasing UGC"})}),"\n"]}),"\n",(0,a.jsx)(t.h2,{id:"setup",children:"Setup"}),"\n",(0,a.jsx)(t.h3,{id:"initialization",children:"Initialization"}),"\n",(0,a.jsx)(t.p,{children:"The mod.io monetization features are enabled as part of the onboarding process on your game profile. Once that is setup, there is nothing further you need to do for initialization in the SDK."}),"\n",(0,a.jsx)(t.p,{children:"Ensure that you have set the appropriate Portal when initializing the SDK for the portal you are using for purchasing - for instance, on Steam, you must initialize with Modio::Portal::Steam in order to redeem entitlements for Steam."}),"\n",(0,a.jsx)(t.h3,{id:"querying-for-monetized-content",children:"Querying for Monetized Content"}),"\n",(0,a.jsxs)(t.p,{children:["Regardless of whether you are using Virtual Currency or the USD marketplace model, the regular ",(0,a.jsx)(t.code,{children:"<<ListAllModsAsync>>"})," method includes an additional filter for whether the results include paid content. By default, only free mods are shown, but you can set ",(0,a.jsx)(t.code,{children:"RevenueType"})," on the ",(0,a.jsx)(t.code,{children:"<<FilterParams>>"})," object passed to ",(0,a.jsx)(t.code,{children:"<<ListAllModsAsync>>"})," to include free and paid content, or just paid content. If you are using Virtual Currency, then all mods returned will have a ",(0,a.jsx)(t.code,{children:"Price"})," property, indicating the virtual currency price that must be paid in order to purchase. If you are using USD Marketplace, then each mod will have an associated set of ",(0,a.jsx)(t.code,{children:"SKUMappings"}),", which map to the SKU pack that must be purchased and owned by the player in order to consume it for that piece of content."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-cpp",children:"Modio::ListAllModsAsync(Modio::FilterParams().RevenueType(Modio::FilterParams::RevenueFilterType::FreeAndPaid), [](Modio::ErrorCode ec, Modio::Optional<Modio::ModInfoList> Results)\n{\n    if (ec)\n    {\n        // Error handling\n    }\n    else\n    {\n        for (Modio::ModInfo& CurrentModProfile : *Results)\n        {\n            std::cout << CurrentModProfile.Price;\n        }\n    }\n});\n"})}),"\n",(0,a.jsx)(t.h3,{id:"showing-user-purchases",children:"Showing user purchases"}),"\n",(0,a.jsxs)(t.p,{children:["Even though all purchased mods are automatically subscribed, the user can still unsubscribe from them and uninstall them; however, they still remain owned and purchased by the user. They must re-subscribe to the mod in order to have it installed. This is facilitated by ",(0,a.jsx)(t.code,{children:"<<FetchUserPurchasesAsync>>"}),", which will fetch a list of a users purchased mods. After a successful call, you can then display them with ",(0,a.jsx)(t.code,{children:"<<QueryUserPurchases>>"}),", allowing re-subscription if necessary."]}),"\n",(0,a.jsx)(t.h3,{id:"virtual-currency",children:"Virtual Currency"}),"\n",(0,a.jsx)(t.admonition,{type:"note",children:(0,a.jsx)(t.p,{children:"This functionality is demonstrated in example 09_MonetizationWalletManagement (for initialization and wallet management) and 10_MonetizationPurchase (for purchase functionality)."})}),"\n",(0,a.jsx)(t.h4,{id:"getting-the-users-wallet",children:"Getting the user's wallet"}),"\n",(0,a.jsxs)(t.p,{children:["On startup, you can make a call to ",(0,a.jsx)(t.code,{children:"<<GetUserWalletBalanceAsync>>"})," to get the balance of the current user's wallet. If no wallet exists for the user, one will be created for them automatically. This call returns the users wallet balance for the current game. On startup is the only time you need to make this call."]}),"\n",(0,a.jsxs)(t.p,{children:["We recommend that you cache the value of this result in your game code rather than making consistent calls to ",(0,a.jsx)(t.code,{children:"<<GetUserWalletBalanceAsync>>"})," and update your local state from the return values of other calls that affect wallet balance."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-cpp",children:"\t\tModio::GetUserWalletBalanceAsync([](Modio::ErrorCode ec, Modio::Optional<uint64_t> WalletBalance) {\n\t\t\tif (!ec && WalletBalance.has_value())\n\t\t\t{\n\t\t\t\tGlobalState.WalletAmount = WalletBalance.value();\n\t\t\t}\n            else \n            {\n                // Error handling\n            }\n\t\t});\n"})}),"\n",(0,a.jsx)(t.h4,{id:"syncing-virtual-currency-entitlements",children:"Syncing Virtual Currency Entitlements"}),"\n",(0,a.jsx)(t.admonition,{type:"note",children:(0,a.jsx)(t.p,{children:"This functionality is demonstrated in example 12_RefreshEntitlements.\nFor Steam, this functionality is demonstrated in advanced example 01_SteamAuthAndEntitlements.\nFor consoles, check the examples folder in the platform module."})}),"\n",(0,a.jsx)(t.p,{children:"If you are supporting the purchase of virtual currency packs on platform storefronts, entitlement refreshing is the method by which those virtual currency packs are consumed and converted into mod.io virtual currency credits for users to purchase UGC with."}),"\n",(0,a.jsx)(t.p,{children:"Each platform has a specific way of setting up entitlements for consumption, but generally speaking the way you consume those entitlements is the same. Read each platform's Marketplace documentation for how to configure entitlements and any platform-specific information for entitlement consumption."}),"\n",(0,a.jsxs)(t.p,{children:["You should always start by calling ",(0,a.jsx)(t.code,{children:"GetUserWalletBalanceAsync"})," to ensure that a user has a wallet created, or entitlements cannot be consumed. To consume entitlements, call ",(0,a.jsx)(t.code,{children:"RefreshUserEntitlementsAsync"})," as follows:"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-cpp",children:'const Modio::EntitlementParams EntitlementParams;\nModio::RefreshUserEntitlementsAsync(\n\tEntitlementParams,\n\t[&](Modio::ErrorCode ec, Modio::Optional<Modio::EntitlementConsumptionStatusList> Entitlements) {\n\t\tif (ec)\n\t\t{\n\t\t\tstd::cout << "Failed to refresh user entitlements: " << ec.message() << std::endl;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (Entitlements.has_value() && Entitlements->Size() > 0)\n\t\t\t{\n\t\t\t\tif (Entitlements->WalletBalance.has_value())\n\t\t\t\t{\n\t\t\t\t\tUserWalletBalance = Entitlements->WalletBalance->Balance;\n\n\t\t\t\t\tstd::cout << "Entitlements consumed: " << Entitlements->Size() << std::endl;\n\t\t\t\t\tstd::cout << "Updated UserWalletBalance is " << UserWalletBalance;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tstd::cout << "No entitlements synced; nothing further to do." << std::endl;\n\t\t\t}\n\t\t}\n\t});\n'})}),"\n",(0,a.jsx)(t.admonition,{type:"note",children:(0,a.jsxs)(t.p,{children:["The ",(0,a.jsx)(t.code,{children:"WalletBalance"})," returned in ",(0,a.jsx)(t.code,{children:"Modio::EntitlementConsumptionStatusList"})," will be 0 if no entitlements have been consumed. You should conditionally update your local state based on whether any entitlements have actually been consumed."]})}),"\n",(0,a.jsxs)(t.p,{children:["Generally speaking, you should do this on startup in case the user has made a purchase outside of the game, and after a user has made a purchase on a platform - most platforms will have some callback or indicator that this has occurred. Check that the ",(0,a.jsx)(t.code,{children:"Modio::Optional<Modio::EntitlementConsumptionStatusList>"})," is valid and its size is greater than 0."]}),"\n",(0,a.jsx)(t.h4,{id:"purchasing-ugc-with-virtual-currency",children:"Purchasing UGC with Virtual Currency"}),"\n",(0,a.jsxs)(t.p,{children:["You can call ",(0,a.jsx)(t.code,{children:"<<PurchaseModAsync>>"})," to purchase any given UGC. PurchaseModAsync takes two parameters = the ModID of the UGC to purchase, and the ExpectedPrice, which is the price displayed to the user from ",(0,a.jsx)(t.code,{children:"<<ListAllModsAsync>>"}),". You must include this parameter for safety, so the user is not charged more or less than the price displayed to them in case the price of the UGC has changed between the call to ListAllModsAsync and purchase time.\nOnce UGC is purchased, it is automatically subscribed to for the user."]}),"\n",(0,a.jsxs)(t.p,{children:["You should validate that the user has enough virtual currency to make the purchase by comparing it to the balance you received from ",(0,a.jsx)(t.code,{children:"GetUserWalletBalanceAsync"}),". Note this is purely for user experience (ie for graying out the purchase button in the UI, or upselling the user a virtual currenct pack), and ",(0,a.jsx)(t.code,{children:"PurchaseModAsync"})," will return an error if the user does not have enough in their wallet."]}),"\n",(0,a.jsxs)(t.p,{children:["The updated wallet balance after the purchase amount is subtracted is returned in the callback of ",(0,a.jsx)(t.code,{children:"<<PurchaseModAsync>>"}),"."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-cpp",children:"Modio::PurchaseModAsync(ModId, ModPrice, [](Modio::ErrorCode ec, Modio::Optional<Modio::TransactionRecord> Transaction) {\n    if (ec)\n    {\n        // Error handling\n    }\n    else\n    {\n        if (Transaction.has_value())\n        {\n            GlobalState.WalletAmount =\n                Transaction.value().UpdatedUserWalletBalance;\n        }\n    }\n});\n"})}),"\n",(0,a.jsx)(t.h3,{id:"usd-marketplace",children:"USD Marketplace"}),"\n",(0,a.jsx)(t.admonition,{type:"warning",children:(0,a.jsx)(t.p,{children:"USD Marketplace is an experimental feature and is subject to change. If you are interested in using this feature, please contact us."})}),"\n",(0,a.jsx)(t.h4,{id:"looking-up-platform-skus",children:"Looking Up Platform SKUs"}),"\n",(0,a.jsx)(t.p,{children:"The first step for USD Marketplace is to look up and cache the SKUs for the platform that you are on. These SKU IDs are used for two purposes:"}),"\n",(0,a.jsxs)(t.ol,{children:["\n",(0,a.jsx)(t.li,{children:"Localized Price Display for the mod that is going to be purchased"}),"\n",(0,a.jsx)(t.li,{children:"Opening the platform store for purchase of this SKU before exchanging it for a mod."}),"\n"]}),"\n",(0,a.jsx)(t.h5,{id:"platform-skus-steam",children:"Platform SKUs: Steam"}),"\n",(0,a.jsx)(t.p,{children:"Steam SKU packs utilize the Steam Inventory Service for its purchase information."}),"\n",(0,a.jsxs)(t.p,{children:["To start, you have to call ",(0,a.jsx)(t.code,{children:"SteamInventory()->RequestPrices()"})," to request all current prices for all applicable item definitions, with your Steam Callback as appropriate."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{children:"if (SteamInventory()) \n{\n    SteamAPICall_t requestPriceCallbackHandle = SteamInventory()->RequestPrices();\n\n    ModioTest::SteamAuthHelper::instance().m_SteamCallResultInventoryPrices.Set(\n        requestPriceCallbackHandle, &ModioTest::SteamAuthHelper::instance(),\n        &ModioTest::SteamAuthHelper::OnRequestPricesResponse);\n}\n"})}),"\n",(0,a.jsx)(t.p,{children:"Within this callback, you can then get the users localized currency for display purposes, and then get all item definitions with their associated localized prices."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{children:"void SteamAuthHelper::OnRequestPricesResponse(SteamInventoryRequestPricesResult_t* result, bool )\n{\n    GlobalSDKState.CurrencyCode = result->m_rgchCurrency;\n\n    uint32_t len = SteamInventory()->GetNumItemsWithPrices();\n    \n    std::vector<SteamItemDef_t> itemDefs(len);\n    std::vector<uint64> prices(len);\n    std::vector<uint64> basePrices(len);\n\n    SteamInventory()->GetItemsWithPrices(itemDefs.data(), prices.data(), basePrices.data(), len);\n\n    if (!itemDefs.empty())\n    {\n        for (uint32_t i = 0; i < itemDefs.size(); i++)\n        {\n            PlatformSKUMapping skuMapping;\n            skuMapping.Price = prices[i];\n            skuMapping.SkuId = std::to_string(itemDefs[i]);\n            GlobalSDKState.PlatformSKUMappings.push_back(skuMapping);\n        }    \n    }\n}\n"})}),"\n",(0,a.jsx)(t.p,{children:"You now have a mapping of SKU ID to Price that you can use for display and purchasing."}),"\n",(0,a.jsx)(t.h4,{id:"displaying-localized-pricing",children:"Displaying localized pricing"}),"\n",(0,a.jsxs)(t.p,{children:["Inside of your UI, for each mod that you want to make available for purchase, you must display the localized price for the SKU that the mod is mapped to. When you are filtering for paid mods, any monetized mods will have a ",(0,a.jsx)(t.code,{children:"SkuMappings"})," property which contains a list of all platform SKU Mappings."]}),"\n",(0,a.jsx)(t.p,{children:"To display the appropriate price, simply find the SKU Mapping for the current Portal that you are going to request the purchase on (ie Steam, PSN, XBoxLive) and look up that SKU ID from your Platform SKUs from the previous step."}),"\n",(0,a.jsx)(t.h4,{id:"purchasing-ugc-with-entitlements",children:"Purchasing UGC with Entitlements"}),"\n",(0,a.jsxs)(t.p,{children:["To perform a purchase in the USD marketplace flow, we recommend calling ",(0,a.jsx)(t.code,{children:"<<GetAvailableUserEntitlementsAsync>>"})," first, to validate that the user has an available entitlement for the SKU of the mod that they want to purchase.\nThis method, and other USD marketplace functions, takes an EntitlementParams struct, which you should populate in the same fashion as though you were calling ",(0,a.jsx)(t.code,{children:"<<RefreshUserEntitlementsAsync>>"})," from our virtual currency flow (refer to platform-specific documentation for information about what parameters need to be included)."]}),"\n",(0,a.jsx)(t.admonition,{type:"note",children:(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.code,{children:"<<RefreshUserEntitlementsAsync>>"})," itself does not need to be called by your game if you are using USD marketplace functionality - we consume entitlements on demand as part of a call to ",(0,a.jsx)(t.code,{children:"<<PurchaseModWithEntitlementsAsync>>"})," rather than the batch consumption performed by ",(0,a.jsx)(t.code,{children:"<<RefreshUserEntitlementsAsync>>"}),", which will not do anything if USD marketplace is enabled for your game."]})}),"\n",(0,a.jsxs)(t.p,{children:["Purchasing with entitlements requires an exact matching SKU entitlement to be available, an available entitlement of a different value will not be consumed instead. If an entitlement for that SKU is not currently available, you can trigger the current platform's purchase UI to allow the user to purchase the correct SKU if necessary.\nOnce you have validated that a suitable entitlement is available, to perform a purchase, you can use the ",(0,a.jsx)(t.code,{children:"<<PurchaseModWithEntitlementAsync>>"})," method, also passing in an EntitlementParams struct populated with the same information as for ",(0,a.jsx)(t.code,{children:"<<GetAvailableUserEntitlementsAsync>>"}),". mod.io will then attempt to consume the applicable platform SKU for the mod, if the user owns one. If the user had an unconsumed entitlement, and our request to consume it is successful, the mod will be automatically subscribed to for the user. Otherwise, an error will be returned indicating whether the the user had an entitlement but that consumption failed, or that the user does not have the correct entitlement. In the latter case, ",(0,a.jsx)(t.code,{children:"<<Modio::MonetizationError::AccountLacksEntitlement>> will be returned."})]}),"\n",(0,a.jsx)(t.mermaid,{value:"sequenceDiagram\nUser->>Game: Click purchase button\nGame->>SDK: GetAvailableUserEntitlementsAsync\nSDK->>Game: user's entitlement data\nalt if user does not have entitlement\nGame-)Game:Display platform UI for purchase\nend\nGame->>SDK:PurchaseModWithEntitlementAsync\nSDK->>Game: purchase success/fail\n"}),"\n",(0,a.jsx)(t.h3,{id:"getting-a-user-delegation-token",children:"Getting a User Delegation Token"}),"\n",(0,a.jsxs)(t.p,{children:["User Delegation Tokens can be used by a backend server for S2S (Server to Server) transactions/functionality. You can get one for the current user by calling ",(0,a.jsx)(t.code,{children:"<<GetUserDelegationToken>>"}),", the callback for which contains the Token as a ",(0,a.jsx)(t.code,{children:"std::string"}),"."]})]})}function h(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>o});var a=n(6540);const i={},r=a.createContext(i);function s(e){const t=a.useContext(r);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),a.createElement(r.Provider,{value:t},e.children)}}}]);